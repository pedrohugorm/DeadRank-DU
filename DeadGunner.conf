name: DeadGunner CUSTOM v3.6.0
pvp: true

slots:
    core:
        class: CoreUnit
        select: all
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DataBank
        select: all
    shield:
        class: ShieldGeneratorUnit
        select: all
    transponder:
        class: TransponderUnit
        select: all

handlers:
  radar_1:
    onEnter(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        if SZD ~= nil and bootTimer > 0 then
            if not inSZ and SZD*0.000005 > radarBuffer or szAlerts then
                system.stopSound()
                system.playSound('contact.mp3')
                if vec3(construct.getVelocity()):len() * 3.6 > 50000 then
                    warpScan[id] = cPos
                else
                    unknownRadar[id] = cPos
                end
            end
        end
  radar_1:
    onLeave(id):
      lua: |
        cPos = vec3(construct.getWorldPosition())
        local inWS = false
        if warpScan then
            for k,v in pairs(warpScan) do if id == k then inWS = true break end end
            if not inSZ and SZD*0.000005 > radarBuffer then
                system.stopSound()
                system.playSound('targetleft.mp3')
                if inWS then
                    local cored = ''
                    if radar_1.isConstructAbandoned(id) == 1 then
                        cored = '[CORED] '
                    end
                    system.print('----------------------')
                    system.print(string.format('%.0f - (%s[%s] %s) MIDPOINT (::pos{0,0,%.0f,%.0f,%.0f})',system.getArkTime(),cored,radar_1.getConstructCoreSize(id),radar_1.getConstructName(id),(cPos['x']+warpScan[id]['x'])/2,(cPos['y']+warpScan[id]['y'])/2,(cPos['z']+warpScan[id]['z'])/2))
                    system.print('----------------------')
                    system.print()
                    warpScan[id] = nil
                end
            end
        end
  unit:
    onStart:
      lua: |
        
        -- Add Valid User ID --
        masterPlayerID = player.getId()
        pilotName = system.getPlayerName(masterPlayerID)
        validPilotCode = '123456' --Your player ID
        ----------------------
        
        chairID = tostring(player.getSeatId())
        showAlerts = false
        
        -- SETTINGS --
        useDB = true --export use connected DB for config options
        showCode = true --export True=plain text transponder codes, False=redacted codes
        szAlerts = false --export
        minimalWidgets = false --export
        hideAbandonedCores = true --export
        targetIndicators = true --export Show warnings when target is speeding up or slowing down
        printCombatLog = true --export Print weapon hits/misses to lua
        homeBaseLocation = '' --export Location of home base (to turn off shield)
        homeBaseDistance = 5 --export Distance from home base to turn off shield (km)
        dangerWarning = 4 --export
        validatePilot = false --export
        bottomHUDLineColorSZ = 'rgba(125, 150, 160, 1)' --export
        bottomHUDFillColorSZ = 'rgba(20, 114, 209, 0.75)' --export
        textColorSZ = 'rgba(200, 225, 235, 1)' --export
        bottomHUDLineColorPVP = 'lightgrey' --export
        bottomHUDFillColorPVP = 'rgba(255, 0, 0, 0.75)' --export
        textColorPVP = 'black' --export
        neutralLineColor = 'lightgrey' --export
        neutralFontColor = 'white' --export
        generateAutoCode = false --export
        autoVent = true --export Autovent shield at 0 hp
        L_Shield_HP = 11500000 --export
        M_Shield_HP = 8625000 --export
        S_Shield_HP = 8625000 --export
        XS_Shield_HP = 500000 --export
        max_radar_load = 300 --export
        maxWeaponsPerWidget = 3 --export How many weapons in each default weapon widget
        radarBuffer = 0.00001
        warning_size = 0.75 --export How large the warning indicators should be
        warning_outline_color = 'rgb(255, 60, 60)' --export
        warning_fill_color = 'rgba(50, 50, 50, 0.9)' --export
        
        -- HP (Shield/CCS) widget --
        hpWidgetX = 33 --export
        hpWidgetY = 88 --export
        hpWidgetScale = 17 --export
        shieldHPColor = 'rgb(25, 247, 255)' --export
        ccsHPColor = 'rgb(60, 255, 60)' --export
        -- Resist Widget --
        resistWidgetX = 45 --export
        resistWidgetY = 82 --export
        resistWidgetScale = 8.5 --export
        antiMatterColor = 'rgb(56, 255, 56)' --export
        electroMagneticColor = 'rgb(27, 255, 217)' --export
        kineticColor = 'rgb(255, 75, 75)' --export
        thermicColor = 'rgb(255, 234, 41)' --export
        -- Transponder Widget --
        transponderWidgetX = 40 --export
        transponderWidgetY = 67 --export
        transponderWidgetScale = 11.25 --export
        
        transponderWidgetXmin = 58.5 --export
        transponderWidgetYmin = -0.9 --export
        transponderWidgetScalemin = 10 --export
        -- Radar Info Widget --
        radarInfoWidgetX = 29 --export
        radarInfoWidgetY = 67 --export
        radarInfoWidgetScale = 11.25 --export
        
        radarInfoWidgetXmin = 67.5 --export
        radarInfoWidgetYmin = -0.9 --export
        radarInfoWidgetScalemin = 10 --export
        -----------------------------------------
        
        -- Choose DB for seat --
        write_db = nil
        local found = false
        for i,dbName in pairs(db) do
            if dbName.getStringValue('usedBy') == chairID then
                write_db = dbName
                found = true
                break
            end
        end
        if not found then
            for i,dbName in pairs(db) do
                if dbName.hasKey('usedBy') == 0 then
                    write_db = dbName
                    write_db.setStringValue('usedBy',chairID)
                    found = true
                end
            end
        end
        if not found then system.print('-- No usable DB found --') end
        ------------------------
        
        friendlySIDs = {}
        userCode = {}
        userCode[validPilotCode] = pilotName
        if useDB and write_db ~= nil then
            globalDB('get')
        end
        
        -- Shield Initialize --
        dmgTick = 0
        homeBaseVec = nil
        if homeBaseLocation ~= '' then
            homeBaseVec = vec3(convertWaypoint(homeBaseLocation))
        end
        --------
        
        --- Radar Initial Values ---
        auto_follow = false
        followID = nil
        cr = nil
        cr_time = nil
        cr_delta = nil
        constructListData = {}
        radarWidgetData = nil
        radarOverload = false
        radarDataID = nil
        radarStart = false
        filterSize = {}
        table.insert(filterSize,'L')
        table.insert(filterSize,'M')
        table.insert(filterSize,'S')
        table.insert(filterSize,'XS')
        useShipID = true
        radarFilter = 'All'
        radarSort = 'Distance'
        validSizes = {}
        table.insert(validSizes,'L')
        table.insert(validSizes,'M')
        table.insert(validSizes,'S')
        table.insert(validSizes,'XS')
        radarStats = {
            ['enemy'] = {
                ['L'] = 0,
                ['M'] = 0,
                ['S'] = 0,
                ['XS'] = 0
            },
            ['friendly'] = {
                ['L'] = 0,
                ['M'] = 0,
                ['S'] = 0,
                ['XS'] = 0
            }
        }
        lastDistance = 0
        lastUpdateTime = 0
        speedCompare = 'Not Identified'
        accelCompare = 'No Accel'
        lastSpeed = 0
        speedCompare = 0
        gapCompare = 0
        identifiedBy = 0
        attackedBy = 0
        warpScan = {}
        unknownRadar = {}
        radarContactNumber = 0
        ------------------------------
        
        --- Screen Resolution/keys ---
        screenHeight = system.getScreenHeight()
        screenWidth = system.getScreenWidth()
        --------------------------
        
        if write_db ~= nil then
            for _,key in pairs(write_db.getKeyList()) do
                if write_db.getStringValue(key) ~= nil and write_db.getStringValue(key) ~= '' and string.starts(key,'uc-') then 
                    userCode[string.sub(key,4)] = write_db.getStringValue(key)
                end
            end
        end
        
        inSZ = construct.isInPvPZone() == 0
        SZD = construct.getDistanceToSafeZone()
        
        --- Weapons --
        initialResistWait = 15 --export
        weaponDataList = {}
        shieldDmgTrack = {
            ['L'] = L_Shield_HP,
            ['M'] = M_Shield_HP,
            ['S'] = S_Shield_HP,
            ['XS'] = XS_Shield_HP
        }
        dmgTracker = {}
        primary = nil
        --------------
        
        -- Transponder --
        codeSeed = nil
        tags = {}
        transponderStatus = false
        tCode = nil
        cOverlap = false
        cOverlapTick = 0
        codeSeed = nil
        rollTimer = 120 --Roll code timer in seconds
        if pcall(require,'autoconf/custom/transponder') then 
            codeSeed = tonumber(require('autoconf/custom/transponder'))
        end
        if codeSeed == nil then
            system.print('--ENTER ACTIVATION CODE--')
            system.print('"agc <number>"')
        else
            unit.setTimer('code',0.25)
        end
        -----------------
        
        bootTimer = 0
        if validatePilot then
            local validPilot = false
            for k,v in pairs(userCode) do 
                if k == tostring(player.getId()) then validPilot = true system.print(string.format('-- Welcome %s --',pilotName)) break end
            end
            if not validPilot then
                system.print(player.getId())
                unit.exit()
            end
        end
        
        warnings = {}
        warningSymbols = {}
        warningSymbols['svgCritical'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 414.205 414.205" style="enable-background:new 0 0 414.205 414.205;">
                            <g>
                                <g>
                                    <polygon points="188.077,129.985 188.077,129.99 165.759,226.671 216.626,207.046 204.891,257.867 194.589,257.867 
                                        206.99,293.641 235.908,257.867 225.606,257.867 244.561,175.773 193.693,195.398 208.797,129.985 		"/>
                                    <path d="M39.11,207.103l167.992,167.992L375.09,207.103L207.103,39.116L39.11,207.103z M207.103,351.103l-143.995-144
                                        L207.103,63.108l143.99,143.995L207.103,351.103z"/>
                                    <path d="M405.093,185.102L229.103,9.112c-12.15-12.15-31.846-12.15-43.996,0L9.112,185.102c-12.15,12.15-12.15,31.846,0,43.996
                                        l175.99,175.995c12.15,12.15,31.846,12.15,43.996,0l175.995-175.99C417.243,216.954,417.243,197.252,405.093,185.102z
                                        M393.092,217.097l-175.985,176c-2.673,2.668-6.226,4.137-10.004,4.137s-7.327-1.469-9.999-4.137L21.108,217.102
                                        c-5.514-5.514-5.514-14.484,0-19.999L197.103,21.108c2.673-2.667,6.221-4.137,9.999-4.137s7.332,1.469,10.004,4.142l175.99,175.99
                                        c2.673,2.673,4.142,6.226,4.142,9.999S395.764,214.429,393.092,217.097z"/>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgWarning'] = [[
                        <svg x="0px" y="0px"
                            viewBox="0 0 192.146 192.146" style="enable-background:new 0 0 192.146 192.146;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M108.186,144.372c0,7.054-4.729,12.32-12.037,12.32h-0.254c-7.054,0-11.92-5.266-11.92-12.32
                                            c0-7.298,5.012-12.31,12.174-12.31C103.311,132.062,108.059,137.054,108.186,144.372z M88.44,125.301h15.447l2.951-61.298H85.46
                                            L88.44,125.301z M190.372,177.034c-2.237,3.664-6.214,5.921-10.493,5.921H12.282c-4.426,0-8.51-2.384-10.698-6.233
                                            c-2.159-3.849-2.11-8.549,0.147-12.349l84.111-149.22c2.208-3.722,6.204-5.96,10.522-5.96h0.332
                                            c4.445,0.107,8.441,2.618,10.513,6.546l83.515,149.229C192.717,168.768,192.629,173.331,190.372,177.034z M179.879,170.634
                                            L96.354,21.454L12.292,170.634H179.879z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgTarget'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 330 330" style="enable-background:new 0 0 330 330;">
                            <g id="XMLID_813_">
                                <path id="XMLID_814_" d="M15,130c8.284,0,15-6.716,15-15V30h85c8.284,0,15-6.716,15-15s-6.716-15-15-15H15C6.716,0,0,6.716,0,15
                                    v100C0,123.284,6.716,130,15,130z"/>
                                <path id="XMLID_815_" d="M15,330h100c8.284,0,15-6.716,15-15s-6.716-15-15-15H30v-85c0-8.284-6.716-15-15-15s-15,6.716-15,15v100
                                    C0,323.284,6.716,330,15,330z"/>
                                <path id="XMLID_816_" d="M315,200c-8.284,0-15,6.716-15,15v85h-85c-8.284,0-15,6.716-15,15s6.716,15,15,15h100
                                    c8.284,0,15-6.716,15-15V215C330,206.716,323.284,200,315,200z"/>
                                <path id="XMLID_817_" d="M215,30h85v85c0,8.284,6.716,15,15,15s15-6.716,15-15V15c0-8.284-6.716-15-15-15H215
                                    c-8.284,0-15,6.716-15,15S206.716,30,215,30z"/>
                                <path id="XMLID_818_" d="M75,165c0,8.284,6.716,15,15,15h60v60c0,8.284,6.716,15,15,15s15-6.716,15-15v-60h60
                                    c8.284,0,15-6.716,15-15s-6.716-15-15-15h-60V90c0-8.284-6.716-15-15-15s-15,6.716-15,15v60H90C81.716,150,75,156.716,75,165z"/>
                            </g>
                        </svg>
                    ]]
        warningSymbols['svgGroup'] = [[
                        <svg x="0px" y="0px" viewBox="0 0 487.3 487.3" style="enable-background:new 0 0 487.3 487.3;" >
                            <g>
                                <g>
                                    <g>
                                        <path d="M362.1,326.05c-32.6-26.8-67.7-44.5-74.9-48c-0.8-0.4-1.3-1.2-1.3-2.1v-50.7c6.4-4.3,10.6-11.5,10.6-19.7v-52.6
                                            c0-26.2-21.2-47.4-47.4-47.4h-5.6h-5.7c-26.2,0-47.4,21.2-47.4,47.4v52.6c0,8.2,4.2,15.5,10.6,19.7v50.7c0,0.9-0.5,1.7-1.3,2.1
                                            c-7.2,3.5-42.3,21.3-74.9,48c-5.9,4.8-9.3,12.1-9.3,19.7v36h128h127.9v-36C371.4,338.15,368,330.85,362.1,326.05z"/>
                                    </g>
                                    <g>
                                        <path d="M479.2,290.55c-27.3-22.5-56.8-37.4-62.8-40.3c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1
                                            c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.7c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8
                                            c-3.7,1.8-16.5,8.2-32.1,18.2c15.6,8.6,40.3,23.4,63.6,42.6c8.2,6.7,13.6,16,15.6,26.2h97v-30.2
                                            C487,300.65,484.2,294.55,479.2,290.55z"/>
                                    </g>
                                    <g>
                                        <path d="M144,250.25c-0.7-0.3-1.1-1-1.1-1.8v-42.5c5.3-3.6,8.9-9.6,8.9-16.6v-44.1c0-21.9-17.8-39.7-39.7-39.7h-4.7h-4.9
                                            c-21.9,0-39.7,17.8-39.7,39.7v44.1c0,6.9,3.5,13,8.9,16.6v42.5c0,0.8-0.4,1.4-1.1,1.8c-6,2.9-35.5,17.8-62.8,40.3
                                            c-4.9,4.1-7.8,10.1-7.8,16.5v30.2h97c1.9-10.2,7.4-19.5,15.6-26.2c23.3-19.2,48-34,63.6-42.6
                                            C160.5,258.45,147.7,252.05,144,250.25z"/>
                                    </g>
                                </g>
                            </g>
                        </svg>
            ]]
        
        
        
        if radar_1 == nil then
            system.print('ERROR: NO RADAR LINKED')
            warnings['noRadar'] = 'svgWarning'
        else
            warnings['noRadar'] = nil
        end
        
        instructionHTML = ''
        if generateAutoCode then
            system.print('-- ENTER ACTIVATION CODE --')
            local textColor = 'white'
            instructionHTML = [[
            <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                    <rect x="]].. tostring(.25 * screenWidth) ..[[" y="]].. tostring(.125 * screenHeight) ..[[" rx="15" ry="15" width="50vw" height="22vh" style="fill:rgba(50, 50, 50, 0.9);stroke:white;stroke-width:5;opacity:0.9;" />
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.15 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size=".8vw" font-weight="bold">
                        Gunner Chair Startup Instructions</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.17 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        1) Press "enter" key and go to lua chat channel</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.19 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        2) Enter the number you would like to use as your unique transponder seed</text>
                    <text x="]].. tostring(.265 * screenWidth) ..[[" y="]].. tostring(.21 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        (or 0 if you do not want auto generated codes)</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.23 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        3) After entering the code, the seat will start</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.25 * screenHeight) ..[[" style="fill: ]]..'orange'..[[" font-size=".8vw" font-weight="bold">
                        Notes:</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.27 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                         - The code entered will create an auto-generated transponder code that changes every ~15 minutes.</text>
                    <text x="]].. tostring(.27 * screenWidth) ..[[" y="]].. tostring(.29 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                        Anyone using this HUD and entering the same startup code will have matching transponders</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.31 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                         - Manually link a data bank to the seat to enable shared functions between the DeadGunner HUD and the DeadRemote HUD</text>
                    <text x="]].. tostring(.255 * screenWidth) ..[[" y="]].. tostring(.33 * screenHeight) ..[[" style="fill: ]]..textColor..[[" font-size=".8vw">
                         - Make sure to run the seat config AFTER linking all radar and weapons to the seat</text>
                    </rect>
                    </svg>]]
        else
            unit.setTimer('booting',1)
            codeSeed = 0
        end
        
        
        html = [[<html> <body style="font-family: Calibri;">]]
        html = html .. instructionHTML .. [[</body></html>]]
        system.setScreen(html)
        system.showScreen(1)
        
        showScreen = true
        lShift = false
        
        radarRange = 0
        if radar_1 ~= nil then
            radarRange = radar_1.getIdentifyRanges()
            if #radarRange > 0 then
                radarRange = radarRange[1]
            else
                local radar_name = radar_1.getName()
                local radar_size = radar_name:match('Space Radar (%w)')
                local ranges = {}
                ranges['s'] = 90750*1.5
                ranges['m'] = 181500*1.5
                ranges['l'] = 400000
                radarRange = ranges[radar_size]
            end
        end

    onStop:
      lua: |
        if transponder_1 ~= nil then
            local keep = {}
            if codeSeed ~= nil then
                for i,v in ipairs(tags) do
                    if not string.starts(v,'AGC') then
                        table.insert(keep,v)
                    end
                end
                transponder_1.setTags(keep)
                transponder_1.deactivate()
            end
        end
        
        if write_db ~= nil then write_db.clearValue('targetSpeed') write_db.clearValue('targetFollowDist') write_db.clearValue('targetID') globalDB('save') end
    onTimer:
      args: ['radar']
      lua: |
          for id,pos in pairs(unknownRadar) do
              system.print()
              system.print('------ New Contact -------')
              system.print(string.format('%s',id))
              system.print('First contact:')
              system.print(string.format('::pos{0,0,%s,%s,%s}',pos['x'],pos['y'],pos['z']))
              local cored = ''
              if radar_1.isConstructAbandoned(id) == 1 then
                  cored = '[CORED] '
              end
              system.print(string.format('Name: %s%s',cored,radar_1.getConstructName(id)))
              system.print(string.format('Size: %s',radar_1.getConstructCoreSize(id)))
              system.print('---------------------------')
          end
          unknownRadar = {}
    onTimer:
      args: ['booting']
      lua: |
          if bootTimer == 2 then
              if radar_1 then radarData = RadarWidgetCreate() end
              
              if transponder_1 ~= nil then unit.setTimer('code',0.25) end
              radarStart = true
              if radar_1 then unit.setTimer('radar',0.15) end
              WeaponWidgetCreate()
              unit.stopTimer('booting')
          else
              system.print('System booting: '..tostring(bootTimer))
          end
          bootTimer = bootTimer + 1
    onTimer:
      args: ['code']
      lua: |
          if transponder_1 ~= nil then
              tags = transponder_1.getTags()
              if transponder_1.isActive() ~= 1 then transponder_1.activate() end
              
          end
          
          local a = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
          math.randomseed(tonumber(string.format('%.0f',codeSeed + system.getArkTime()/rollTimer)))
          local genCode = 'AGC'
          for i = 1,5 do
              local c = math.random(1,string.len(a))
              genCode = genCode .. string.sub(a,c,c)
          end
          
          if cOverlapTick > 5 then unit.stopTimer('overlap') end
          
          local cApplied = contains(tags,genCode)
          if genCode ~= tCode or not cApplied then
          
              if cOverlapTick == 0 or cOverlapTick > 3 then 
                  local r = {}
                  for i,v in ipairs(tags) do
                      if string.starts(v,'AGC') then
                          table.insert(r,i)
                      end
                  end
                  for _,i in ipairs(r) do table.remove(tags,i) end
          
                  if cOverlapTick == 0 and tCode ~= nil then
                      cOverlapTick = 1
                      unit.setTimer('overlap',2)
                  end
                  if cOverlapTick >= 3 or tCode == nil then
                      unit.stopTimer('overlap')
                      tCode = genCode
                      cOverlapTick = 0
                      local r = {}
                      for i,v in ipairs(tags) do
                          if string.starts(v,'AGC') then
                              table.insert(r,i)
                          end
                      end
                      for _,i in ipairs(r) do table.remove(tags,i) end
                      table.insert(tags,genCode)
                      transponder_1.setTags(tags)
                  else
                      table.insert(tags,genCode)
                      table.insert(tags,tCode)
                      transponder_1.setTags(tags)
                  end
              end
          end
    onTimer:
      args: ['overlap']
      lua: |
          cOverlapTick = cOverlapTick + 1
  system:
    onStart:
      lua: |
        json = require("dkjson")
        Atlas = require('atlas')
        clamp = utils.clamp
        
        function convertWaypoint(wp)
            local clamp  = utils.clamp
            local deg2rad    = math.pi/180
            local rad2deg    = 180/math.pi
            local epsilon    = 1e-10
        
            local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
            local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' .. num ..  ',' .. num .. '}'
            local systemId = wp 
        
            systemId, bodyId, latitude, longitude, altitude = string.match(wp, posPattern)
            assert(systemId, 'Position string is malformed.')
        
            systemId  = tonumber(systemId)
            bodyId    = tonumber(bodyId)
            latitude  = tonumber(latitude)
            longitude = tonumber(longitude)
            altitude  = tonumber(altitude)
        
            if bodyId == 0 then -- this is a hack to represent points in space
            mapPosition =  setmetatable({latitude  = latitude,
                                        longitude = longitude,
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            else
            mapPosition = setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                        longitude = deg2rad*(longitude % 360),
                                        altitude  = altitude,
                                        bodyId    = bodyId,
                                        systemId  = systemId}, MapPosition)
            end
            if mapPosition.bodyId == 0 then
                return vec3(mapPosition.latitude, mapPosition.longitude, mapPosition.altitude)
            end
        
            local center = {
                x=Atlas[systemId][bodyId].center[1],
                y=Atlas[systemId][bodyId].center[2],
                z=Atlas[systemId][bodyId].center[3]
            }
        
            local xproj = math.cos(mapPosition.latitude)
            return center + (Atlas[systemId][bodyId].radius + mapPosition.altitude) *
                vec3(xproj*math.cos(mapPosition.longitude),
                    xproj*math.sin(mapPosition.longitude),
                    math.sin(mapPosition.latitude))
        end
        
        function string.starts(String,Start)
           return string.sub(String,1,string.len(Start))==Start
        end
        
        function contains(tablelist, val)
            for i=1,#tablelist do
               if tablelist[i] == val then 
                  return true
               end
            end
            return false
        end
        
        function formatNumber(val, numType)
            if numType == 'speed' then
                local speedString = ''
                if type(val) == 'number' then speedString = string.format('%.0fkm/h',val)
                else speedString = string.format('%skm/h',val)
                end
                return speedString
            elseif numType == 'distance' then
                local distString = ''
                if type(val) == 'number' then
                    if val < 1000 then distString = string.format('%.2fm',val)
                    elseif val < 100000 then distString = string.format('%.2fkm',val/1000)
                    else distString = string.format('%.2fsu',val*.000005)
                    end
                else
                    distString = string.format('%sm',val)
                end
                return distString
            elseif numType == 'mass' then
                local massStr = ''
                if type(val) == 'number' then
                    if val < 1000 then massStr = string.format('%.2fkg',val)
                    elseif val < 1000000 then massStr = string.format('%.2ft',val/1000)
                    else massStr = string.format('%.2fkt',val/1000000)
                    end
                else
                    massStr = string.format('%skg',val)
                end
                return massStr
            end
        end
        
        function WeaponWidgetCreate()
            if type(weapon) == 'table' and #weapon > 0 then
                local _panel = system.createWidgetPanel("Weapons")
                weaponDataList = {}
                for i = 1, #weapon do
                    local weaponDataID = weapon[i].getWidgetDataId()
                    local widgetType = weapon[i].getWidgetType()
                    local _widget = system.createWidget(_panel, "weapon")
                    system.addDataToWidget(weaponDataID,system.createWidget(_panel, widgetType))
                    if i % maxWeaponsPerWidget == 0 and i < #weapon then _panel = system.createWidgetPanel("Weapons") end
                end
            end
        end
        
        function updateRadar(filter)
            local data = radar_1.getWidgetData()
        
            local radarList = radar_1.getConstructIds()
            local constructList = {}
            if #radarList > max_radar_load then radarOverload = true else radarOverload = false end
            radarContactNumber = #radarList
        
            local enemyLShips = 0
            local friendlyLShips = 0
            
            local shipsBySize = {}
            shipsBySize['XS'] = {}
            shipsBySize['S'] = {}
            shipsBySize['M'] = {}
            shipsBySize['L'] = {}
        
            local localIdentifiedBy = 0
            local localAttackedBy = 0
            local tempRadarStats = {
                ['enemy'] = {
                    ['L'] = 0,
                    ['M'] = 0,
                    ['S'] = 0,
                    ['XS'] = 0
                },
                ['friendly'] = {
                    ['L'] = 0,
                    ['M'] = 0,
                    ['S'] = 0,
                    ['XS'] = 0
                }
            }
            
            local target = tostring(radar_1.getTargetId())
            --for n,id in pairs(radarList) do
            local n = 0
            for id in data:gmatch('{"constructId":"([%d%.]*)"') do
                local identified = radar_1.isConstructIdentified(id) == 1--construct.isIdentified--
                local shipType = radar_1.getConstructKind(id)
                local abandonded = radar_1.isConstructAbandoned(id) == 1
        
                if  (radarOverload and shipType == 5 and not abandonded) or identified or id == target or (not radarOverload and not (hideAbandonedCores and abandonded)) then
                    local shipSize = radar_1.getConstructCoreSize(id)--construct.size--
                    local nameOrig = radar_1.getConstructName(id) --construct.name--
                    local threatLevel = radar_1.getThreatRateFrom(id)--construct.targetThreatState--
                    if threatLevel == 2 then localIdentifiedBy = localIdentifiedBy + 1
                    elseif threatLevel == 5 then localAttackedBy = localAttackedBy + 1
                    end
                    local tMatch = radar_1.hasMatchingTransponder(id) == 1
                    local name = nameOrig--:gsub('%[',''):gsub('%]','')
                    nameOrig = nameOrig:gsub('%]','%%]'):gsub('%[','%%['):gsub('%(','%%('):gsub('%)','%%)')
                    local uniqueCode = string.sub(tostring(id),-3)
                    local uniqueName = string.format('[%s] %s',uniqueCode,name)
                    if tMatch then 
                        local owner = radar_1.getConstructOwnerEntity(id)
                        if owner['isOrganization'] then
                            owner = system.getOrganization(owner['id'])
                            uniqueName = string.format('[%s] %s',owner['tag'],name)
                        else
                            owner = system.getPlayerName(owner['id'])
                            uniqueName = string.format('[%s] %s',owner,name)
                        end
                    elseif abandonded then
                        uniqueName = string.format('[CORED] %s',name)
                    end
        
                    local shipIDMatch = false
                    if useShipID then for k,v in pairs(friendlySIDs) do if id == k then shipIDMatch = true end end end
                    local friendly = tMatch or shipIDMatch
                    
                    if shipType == 5 and not abandonded then
                        if friendly then tempRadarStats['friendly'][shipSize] = tempRadarStats['friendly'][shipSize] + 1
                        else tempRadarStats['enemy'][shipSize] = tempRadarStats['enemy'][shipSize] + 1
                        end
                    end
        
                    if contains(filterSize,shipSize) or tostring(id) == target then
                        if filter == 'enemy' and not friendly then
                            local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                            for str in rawData do
                                local replacedData = str:gsub(nameOrig,uniqueName)
                                if identified then
                                    table.insert(constructList,1,replacedData)
                                elseif radarSort == 'Size' then
                                    table.insert(shipsBySize[shipSize],replacedData)
                                else
                                    table.insert(constructList,replacedData)
                                end
                            end
                        elseif filter == 'identified' and identified then
                            local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                            for str in rawData do
                                local replacedData = str:gsub(nameOrig,uniqueName)
                                if radarSort == 'Size' then
                                    table.insert(shipsBySize[shipSize],replacedData)
                                else
                                    table.insert(constructList,replacedData)
                                end
                            end
                        elseif filter == 'friendly' and friendly then
                            local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                            for str in rawData do
                                local replacedData = str:gsub(nameOrig,uniqueName)
                                if identified then
                                    table.insert(constructList,1,replacedData)
                                elseif radarSort == 'Size' then
                                    table.insert(shipsBySize[shipSize],replacedData)
                                else
                                    table.insert(constructList,replacedData)
                                end
                            end
                        elseif filter == 'primary' and tostring(primary) == uniqueCode then
                            local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                            for str in rawData do
                                local replacedData = str:gsub(nameOrig,uniqueName)
                                if identified then
                                    table.insert(constructList,1,replacedData)
                                elseif radarSort == 'Size' then
                                    table.insert(shipsBySize[shipSize],replacedData)
                                else
                                    table.insert(constructList,replacedData)
                                end
                            end
                        elseif radarFilter == 'All' then
                            local rawData = data:gmatch('{"constructId":"'..tostring(id)..'"[^}]*}[^}]*}') 
                            for str in rawData do
                                local replacedData = str:gsub(nameOrig,uniqueName)
                                if identified or tostring(id) == target then
                                    table.insert(constructList,1,replacedData)
                                elseif radarSort == 'Size' then
                                    table.insert(shipsBySize[shipSize],replacedData)
                                else
                                    table.insert(constructList,replacedData)
                                end
                            end
                        end
                    end
                    if n % 50 == 0 then coroutine.yield() end
                end
                n = n + 1
            end
        
            coroutine.yield()
            data = data:gsub('{"constructId[^}]*}[^}]*},*', "")
            data = data:gsub('"errorMessage":""','"errorMessage":"'..radarFilter..'-'..radarSort..'"')
            if radarSort == 'Size' then
                for _,ship in pairs(shipsBySize['XS']) do table.insert(constructList,ship) end
                for _,ship in pairs(shipsBySize['S']) do table.insert(constructList,ship) end
                for _,ship in pairs(shipsBySize['M']) do table.insert(constructList,ship) end
                for _,ship in pairs(shipsBySize['L']) do table.insert(constructList,ship) end
                data = data:gsub('"constructsList":%[%]','"constructsList":['..table.concat(constructList,',')..']')
            else
                data = data:gsub('"constructsList":%[%]','"constructsList":['..table.concat(constructList,',')..']')
            end
        
            radarStats = tempRadarStats
            radarWidgetData = data
            identifiedBy = localIdentifiedBy
            attackedBy = localAttackedBy
            return data
        end
        
        function RadarWidgetCreate()
            local _data = radar_1.getWidgetData()--updateRadar(radarFilter)
            local _panel = system.createWidgetPanel("RADAR")
            local _widget = system.createWidget(_panel, "radar")
            radarDataID = system.createData(_data)
            system.addDataToWidget(radarDataID, _widget)
            return radarDataID
        end
        
        function globalDB(action)
            if write_db ~= nil then
                if action == 'get' then
                    if write_db.hasKey('homeBaseLocation') == 1 then homeBaseLocation = write_db.getStringValue('homeBaseLocation') end
                    if write_db.hasKey('homeBaseDistance') == 1 then homeBaseDistance = write_db.getIntValue('homeBaseDistance') end
                    if write_db.hasKey('printCombatLog') == 1 then printCombatLog = write_db.getIntValue('printCombatLog') == 1 end
                    if write_db.hasKey('dangerWarning') == 1 then dangerWarning = write_db.getIntValue('dangerWarning') end
                    if write_db.hasKey('validatePilot') == 1 then validatePilot = write_db.getIntValue('validatePilot') == 1 end
                    if write_db.hasKey('bottomHUDLineColorSZ') == 1 then bottomHUDLineColorSZ = write_db.getStringValue('bottomHUDLineColorSZ') end
                    if write_db.hasKey('bottomHUDFillColorSZ') == 1 then bottomHUDFillColorSZ = write_db.getStringValue('bottomHUDFillColorSZ') end
                    if write_db.hasKey('textColorSZ') == 1 then textColorSZ = write_db.getStringValue('textColorSZ') end
                    if write_db.hasKey('bottomHUDLineColorPVP') == 1 then bottomHUDLineColorPVP = write_db.getStringValue('bottomHUDLineColorPVP') end
                    if write_db.hasKey('bottomHUDFillColorPVP') == 1 then bottomHUDFillColorPVP = write_db.getStringValue('bottomHUDFillColorPVP') end
                    if write_db.hasKey('textColorPVP') == 1 then textColorPVP = write_db.getStringValue('textColorPVP') end
                    if write_db.hasKey('neutralLineColor') == 1 then neutralLineColor = write_db.getStringValue('neutralLineColor') end
                    if write_db.hasKey('neutralFontColor') == 1 then neutralFontColor = write_db.getStringValue('neutralFontColor') end
                    if write_db.hasKey('generateAutoCode') == 1 then generateAutoCode = write_db.getIntValue('generateAutoCode') == 1 end
                    if write_db.hasKey('autoVent') == 1 then autoVent = write_db.getIntValue('autoVent') == 1 end
                    if write_db.hasKey('L_Shield_HP') == 1 then L_Shield_HP = write_db.getIntValue('L_Shield_HP') end
                    if write_db.hasKey('M_Shield_HP') == 1 then M_Shield_HP = write_db.getIntValue('M_Shield_HP') end
                    if write_db.hasKey('S_Shield_HP') == 1 then S_Shield_HP = write_db.getIntValue('S_Shield_HP') end
                    if write_db.hasKey('XS_Shield_HP') == 1 then XS_Shield_HP = write_db.getIntValue('XS_Shield_HP') end
                    if write_db.hasKey('max_radar_load') == 1 then max_radar_load = write_db.getIntValue('max_radar_load') end
                    if write_db.hasKey('warning_size') == 1 then warning_size = write_db.getFloatValue('warning_size') end
                    if write_db.hasKey('warning_outline_color') == 1 then warning_outline_color = write_db.getStringValue('warning_outline_color') end
                    if write_db.hasKey('warning_fill_color') == 1 then warning_fill_color = write_db.getStringValue('warning_fill_color') end
                    if write_db.hasKey('showCode') == 1 then showCode = write_db.getIntValue('showCode') == 1 end
        
                    if write_db.hasKey('hpWidgetX') == 1 then hpWidgetX = write_db.getFloatValue('hpWidgetX') end
                    if write_db.hasKey('hpWidgetY') == 1 then hpWidgetY = write_db.getFloatValue('hpWidgetY') end
                    if write_db.hasKey('hpWidgetScale') == 1 then hpWidgetScale = write_db.getFloatValue('hpWidgetScale') end
                    if write_db.hasKey('shieldHPColor') == 1 then shieldHPColor = write_db.getStringValue('shieldHPColor') end
                    if write_db.hasKey('ccsHPColor') == 1 then ccsHPColor = write_db.getStringValue('ccsHPColor') end
        
                    if write_db.hasKey('resistWidgetX') == 1 then resistWidgetX = write_db.getFloatValue('resistWidgetX') end
                    if write_db.hasKey('resistWidgetY') == 1 then resistWidgetY = write_db.getFloatValue('resistWidgetY') end
                    if write_db.hasKey('resistWidgetScale') == 1 then resistWidgetScale = write_db.getFloatValue('resistWidgetScale') end
                    if write_db.hasKey('antiMatterColor') == 1 then antiMatterColor = write_db.getStringValue('antiMatterColor') end
                    if write_db.hasKey('electroMagneticColor') == 1 then electroMagneticColor = write_db.getStringValue('electroMagneticColor') end
                    if write_db.hasKey('kineticColor') == 1 then kineticColor = write_db.getStringValue('kineticColor') end
                    if write_db.hasKey('thermicColor') == 1 then thermicColor = write_db.getStringValue('thermicColor') end
        
                    if write_db.hasKey('transponderWidgetX') == 1 then transponderWidgetX = write_db.getFloatValue('transponderWidgetX') end
                    if write_db.hasKey('transponderWidgetY') == 1 then transponderWidgetY = write_db.getFloatValue('transponderWidgetY') end
                    if write_db.hasKey('transponderWidgetScale') == 1 then transponderWidgetScale = write_db.getFloatValue('transponderWidgetScale') end
                    if write_db.hasKey('transponderWidgetXmin') == 1 then transponderWidgetXmin = write_db.getFloatValue('transponderWidgetXmin') end
                    if write_db.hasKey('transponderWidgetYmin') == 1 then transponderWidgetYmin = write_db.getFloatValue('transponderWidgetYmin') end
                    if write_db.hasKey('transponderWidgetScalemin') == 1 then transponderWidgetScalemin = write_db.getFloatValue('transponderWidgetScalemin') end
        
                    if write_db.hasKey('radarInfoWidgetX') == 1 then radarInfoWidgetX = write_db.getFloatValue('radarInfoWidgetX') end
                    if write_db.hasKey('radarInfoWidgetY') == 1 then radarInfoWidgetY = write_db.getFloatValue('radarInfoWidgetY') end
                    if write_db.hasKey('radarInfoWidgetScale') == 1 then radarInfoWidgetScale = write_db.getFloatValue('radarInfoWidgetScale') end
                    if write_db.hasKey('radarInfoWidgetXmin') == 1 then radarInfoWidgetXmin = write_db.getFloatValue('radarInfoWidgetXmin') end
                    if write_db.hasKey('radarInfoWidgetYmin') == 1 then radarInfoWidgetYmin = write_db.getFloatValue('radarInfoWidgetYmin') end
                    if write_db.hasKey('radarInfoWidgetScalemin') == 1 then radarInfoWidgetScalemin = write_db.getFloatValue('radarInfoWidgetScalemin') end
        
                    if db_1.hasKey('minimalWidgets') == 1 then minimalWidgets = db_1.getIntValue('minimalWidgets') == 1 end
        
                    for _,key in pairs(write_db.getKeyList()) do
                        if string.starts(key,'sc-') then
                            local id = string.sub(key,4)
                            friendlySIDs[tonumber(id)] = write_db.getStringValue(string.format('sc-%s',id))
                        end
                    end
        
                elseif action == 'save' then
                    write_db.setStringValue('uc-'..validPilotCode,pilotName)
                    if printCombatLog then write_db.setIntValue('printCombatLog',1) else write_db.setIntValue('printCombatLog',0) end
                    write_db.setIntValue('dangerWarning',dangerWarning)
                    if validatePilot then write_db.setIntValue('validatePilot',1) else write_db.setIntValue('validatePilot',0) end
                    write_db.setStringValue('bottomHUDLineColorSZ',bottomHUDLineColorSZ)
                    write_db.setStringValue('bottomHUDFillColorSZ',bottomHUDFillColorSZ)
                    write_db.setStringValue('textColorSZ',textColorSZ)
                    write_db.setStringValue('bottomHUDLineColorPVP',bottomHUDLineColorPVP)
                    write_db.setStringValue('bottomHUDFillColorPVP',bottomHUDFillColorPVP)
                    write_db.setStringValue('textColorPVP',textColorPVP)
                    write_db.setStringValue('neutralLineColor',neutralLineColor)
                    write_db.setStringValue('neutralFontColor',neutralFontColor)
                    if generateAutoCode then write_db.setIntValue('generateAutoCode',1) else write_db.setIntValue('generateAutoCode',0) end
                    if autoVent then write_db.setIntValue('autoVent',1) else write_db.setIntValue('autoVent',0) end
                    write_db.setIntValue('L_Shield_HP',L_Shield_HP)
                    write_db.setIntValue('M_Shield_HP',M_Shield_HP)
                    write_db.setIntValue('S_Shield_HP',S_Shield_HP)
                    write_db.setIntValue('XS_Shield_HP',XS_Shield_HP)
                    write_db.setIntValue('max_radar_load',max_radar_load)
                    write_db.setFloatValue('warning_size',warning_size)
                    write_db.setStringValue('warning_outline_color',warning_outline_color)
                    write_db.setStringValue('warning_fill_color',warning_fill_color)
                    if showCode then write_db.setIntValue('showCode',1) else write_db.setIntValue('showCode',0) end
        
                    write_db.setFloatValue('hpWidgetX',hpWidgetX)
                    write_db.setFloatValue('hpWidgetY',hpWidgetY)
                    write_db.setFloatValue('hpWidgetScale',hpWidgetScale)
                    write_db.setStringValue('shieldHPColor',shieldHPColor)
                    write_db.setStringValue('ccsHPColor',ccsHPColor)
        
                    write_db.setFloatValue('resistWidgetX',resistWidgetX)
                    write_db.setFloatValue('resistWidgetY',resistWidgetY)
                    write_db.setFloatValue('resistWidgetScale',resistWidgetScale)
                    write_db.setStringValue('antiMatterColor',antiMatterColor)
                    write_db.setStringValue('electroMagneticColor',electroMagneticColor)
                    write_db.setStringValue('kineticColor',kineticColor)
                    write_db.setStringValue('thermicColor',thermicColor)
        
                    write_db.setFloatValue('transponderWidgetX',transponderWidgetX)
                    write_db.setFloatValue('transponderWidgetY',transponderWidgetY)
                    write_db.setFloatValue('transponderWidgetScale',transponderWidgetScale)
                    write_db.setFloatValue('transponderWidgetXmin',transponderWidgetXmin)
                    write_db.setFloatValue('transponderWidgetYmin',transponderWidgetYmin)
                    write_db.setFloatValue('transponderWidgetScalemin',transponderWidgetScalemin)
        
                    write_db.setFloatValue('radarInfoWidgetX',radarInfoWidgetX)
                    write_db.setFloatValue('radarInfoWidgetY',radarInfoWidgetY)
                    write_db.setFloatValue('radarInfoWidgetScale',radarInfoWidgetScale)
                    write_db.setFloatValue('radarInfoWidgetXmin',radarInfoWidgetXmin)
                    write_db.setFloatValue('radarInfoWidgetYmin',radarInfoWidgetYmin)
                    write_db.setFloatValue('radarInfoWidgetScalemin',radarInfoWidgetScalemin)
        
                    if minimalWidgets then db_1.setIntValue('minimalWidgets',1) else db_1.setIntValue('minimalWidgets',0) end
                    if homeBaseLocation then write_db.setStringValue('homeBaseLocation',homeBaseLocation) end
                    write_db.setIntValue('homeBaseDistance',homeBaseDistance)
        
                end
            end
        end
        
        function weaponsWidget()
            local ww = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            local wtext = ''
            if weapon_size > 0 then
                local wStatus = {[1] = 'Idle', [2] = 'Firing', [4] = 'Reloading', [5] = 'Unloading'}
                ww = ww .. [[
                    <line x1="]].. 0.02*screenWidth ..[[" y1="]].. 0.665*screenHeight ..[[" x2="]].. 0.15*screenWidth ..[[" y2="]].. 0.665*screenHeight ..[[" style="stroke:]]..neutralLineColor..[[;stroke-width:0.25;opacity:]].. 1 ..[[;" />
                    ]]
                local offset = 1
                for i,w in pairs(weapon) do
                    local textColor = neutralFontColor
                    local ammoColor = neutralFontColor
                    local probColor = warning_outline_color
                    if w.isOutOfAmmo() == 1 then ammoColor = warning_outline_color end
        
                    local probs = w.getHitProbability()
                    if probs > .7 then probColor = ccsHPColor elseif probs > .5 then probColor = 'yellow' end
                    
                    local weaponName = w.getName():lower()
        
                    local matches = {}
                    for w in weaponName:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                    local prefix = matches[1]:sub(1,1) .. matches[2]:sub(1,1)
                    local wtype = ''
                    if string.find(weaponName,'cannon') then wType = 'Cannon'
                    elseif string.find(weaponName,'railgun') then wType = 'Railgun'
                    elseif string.find(weaponName,'missile') then wType = 'Missile'
                    elseif string.find(weaponName,'laser') then wType = 'Laser'
                    elseif string.find(weaponName,'stasis') then wType = 'Stasis'
                    end
                    if wType == 'Stasis' then
                        weaponName = wType
                    else
                        weaponName = prefix .. wType
                    end
        
                    local ammoType = system.getItem(w.getAmmo())
                    ammoType = tostring(ammoType['name']):lower()
                    ammoTypeColor = neutralFontColor
                    if string.find(ammoType,'antimatter') then ammoTypeColor = antiMatterColor ammoType = 'Antimatter'
                    elseif string.find(ammoType,'electromagnetic') then ammoTypeColor = electroMagneticColor ammoType = 'ElectroMagnetic'
                    elseif string.find(ammoType,'kinetic') then ammoTypeColor = kineticColor ammoType = 'Kinetic'
                    elseif string.find(ammoType,'thermic') then ammoTypeColor = thermicColor ammoType = 'Thermic'
                    end
                    local weaponStr = string.format('<div style="position: absolute;font-weight: bold;font-size: .8vw;top: '.. tostring((0.66 - 0.015*i) * screenHeight) ..'px;left: '.. tostring(0.02* screenWidth) ..'px;"><div style="float: left;color: %s;">%s |&nbsp;</div><div style="float: left;color:%s;"> %.2f%% </div><div style="float: left;color: %s;"> | %s |&nbsp;</div><div style="float: left;color: %s;"> '..ammoType..'&nbsp;</div><div style="float: left;color: %s;">(%s) </div></div>',neutralFontColor,weaponName,probColor,probs*100,textColor,wStatus[w.getStatus()],ammoTypeColor,ammoColor,w.getAmmoCount())
                    wtext = wtext .. weaponStr
                    offset = i
                end
                offset = offset + 1
                ww = ww .. [[
                    <line x1="]].. 0.02*screenWidth ..[[" y1="]].. (0.675-offset*0.015)*screenHeight ..[[" x2="]].. 0.15*screenWidth ..[[" y2="]].. (0.675-offset*0.015)*screenHeight ..[[" style="stroke:]]..neutralLineColor..[[;stroke-width:0.25;opacity:]].. 1 ..[[;" />
                    ]]
            end
            ww = ww .. '</svg>' .. wtext
            return ww
        end
        
        function transponderWidget()
            local tw = ''
            if transponder_1 ~= nil then
                local transponderColor = warning_outline_color
                local transponderStatus = 'offline'
                if transponder_1.isActive() == 1 then transponderColor = shieldHPColor transponderStatus = 'Active' end
                local tags = transponder_1.getTags()
        
                local x,y,s
                if minimalWidgets then
                    y = transponderWidgetYmin
                    x = transponderWidgetXmin
                    s = transponderWidgetScalemin
                else
                    y = transponderWidgetY
                    x = transponderWidgetX
                    s = transponderWidgetScale
                end
        
                tw = [[
                    <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 0 286 ]]..tostring(101+#tags*24)..[[" width="]]..s..[[vw">
                        <rect x="6%" y="12%" width="87%" height="79%" rx="1%" ry="1%" fill="rgba(100,100,100,.9)" />
                        <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                        <polygon style="stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 ]]..tostring(81+#tags*24)..[[ 18 ]]..tostring(83+#tags*24)..[["/>
                        <text style="fill: ]]..fontColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">Transponder Status:</text>
                        <text style="fill: ]]..transponderColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="190" y="35">]]..transponderStatus..[[</text>
                    ]]
        
        
                for i,tag in pairs(tags) do
                    local code = 'redacted'
                    if showCode then code = tag end
                    tw = tw .. [[<line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="]]..tostring(54+(i-1)*27)..[[" x2="22" y2="]]..tostring(80.7+(i-1)*27)..[["/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="]]..tostring(73+(i-1)*27)..[[">]]..code..[[</text>]]
                end    
                tw = tw .. '</svg>'
            end
        
            return tw
        end
        
        function hpWidget()
            local hw = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            --Shield/CCS Widget
            shieldPercent = 0
            if shield_1 then
                shieldPercent = shield_1.getShieldHitpoints()/shield_1.getMaxShieldHitpoints()*100
            end
            CCSPercent = 0
            if core_1 then
                if core_1.getMaxCoreStress() then
                    CCSPercent = 100*(core_1.getMaxCoreStress()-core_1.getCoreStress())/core_1.getMaxCoreStress()
                end
            end
            if CCSPercent < 25 and write_db then
                write_db.clearValue('homeBaseLocation')
            end
            if (shield_1 and shieldPercent < 15) or showAlerts then
                hw = hw .. string.format([[
                <svg width="]].. tostring(.06 * screenWidth) ..[[" height="]].. tostring(.06 * screenHeight) ..[[" x="]].. tostring(.40 * screenWidth) ..[[" y="]].. tostring(.60 * screenHeight) ..[[" style="fill: red;">
                    ]]..warningSymbols['svgCritical']..[[
                </svg>
                <text x="]].. tostring(.45 * screenWidth) ..[[" y="]].. tostring(.64 * screenHeight) ..[[" style="fill: red" font-size="3.42vh" font-weight="bold">SHIELD CRITICAL</text>
                ]])
            elseif (shield_1 and shieldPercent < 30) or showAlerts then
                hw = hw .. string.format([[
                <svg width="]].. tostring(.06 * screenWidth) ..[[" height="]].. tostring(.06 * screenHeight) ..[[" x="]].. tostring(.40 * screenWidth) ..[[" y="]].. tostring(.60 * screenHeight) ..[[" style="fill: orange;">
                    ]]..warningSymbols['svgWarning']..[[
                </svg>
                <text x="]].. tostring(.45 * screenWidth) ..[[" y="]].. tostring(.64 * screenHeight) ..[[" style="fill: orange" font-size="3.42vh" font-weight="bold">SHIELD LOW</text>
                ]])
            end
            hw = hw .. '</svg>'
            hw = hw .. [[
                <svg style="position: absolute; top: ]]..hpWidgetY..[[vh; left: ]]..hpWidgetX..[[vw;" viewBox="0 0 355 97" width="]]..tostring(hpWidgetScale)..[[vw">
                    <polyline style="fill-opacity: 0; stroke-linejoin: round; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" points="2 78.902 250 78.902 276 50" bx:origin="0.564202 0.377551"/>
                    <polyline style="stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" points="225 85.853 253.049 85.853 271 67.902" bx:origin="-1.23913 -1.086291"/>
                    <rect x="26.397" y="158.28" width="59" height="9" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000076, 0, 1, -24.396999, -79.380203)" bx:origin="2.813559 -3.390291"/>
                    <rect x="4.921" y="123.131" width="11" height="7" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000076, 0, 1, -2.921, -35.229931)" bx:origin="15.090909 -5.644607"/>
                    <rect x="4.921" y="123.111" width="11" height="6.999" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000106, 0, 1, 13.079, -35.20953)" bx:origin="13.636364 -5.645962"/>
                    <rect x="4.921" y="123.111" width="11" height="6.999" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000106, 0, 1, 29.078999, -35.20953)" bx:origin="12.181818 -5.645719"/>
                    <rect x="4.921" y="123.111" width="11" height="6.999" style="stroke-linecap: round; stroke-linejoin: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[; fill: none;" transform="matrix(1, 0.000106, 0, 1, 45.078999, -35.20953)" bx:origin="10.727273 -5.645477"/>
                    ]]
            local placement = 0
            for i = 4, CCSPercent, 4 do 
                hw = hw .. [[<line style="stroke-width: 5px; stroke-miterlimit: 1; stroke: ]]..ccsHPColor..[[; fill: none;" x1="]]..tostring(5+placement)..[["   y1="56" x2="]]..tostring(5+placement)..[["   y2="72" bx:origin="0 0.096154"/>]]  placement = placement + 10
            end
                    
            hw = hw .. [[
                    <line style="stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="5" y1="25.706" x2="5" y2="39.508" bx:origin="0 1.607143"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="14.859" y1="31.621" x2="14.859" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="24.718" y1="31.684" x2="24.718" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="34.576" y1="31.684" x2="34.576" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="44.435" y1="31.621" x2="44.435" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="54.294" y1="31.621" x2="54.294" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="64.153" y1="31.621" x2="64.153" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="74.012" y1="31.621" x2="74.012" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="83.871" y1="31.621" x2="83.871" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="93.729" y1="31.621" x2="93.729" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="103.588" y1="31.684" x2="103.588" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="113.447" y1="31.684" x2="113.447" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="123.306" y1="31.621" x2="123.306" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="133.165" y1="31.621" x2="133.165" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="143.023" y1="31.621" x2="143.023" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="152.882" y1="31.621" x2="152.882" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="162.741" y1="31.621" x2="162.741" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="172.6" y1="31.621" x2="172.6" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="182.459" y1="31.684" x2="182.459" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="192.318" y1="31.684" x2="192.318" y2="39.571" bx:origin="0 2.0545"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="202.176" y1="31.621" x2="202.176" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="212.035" y1="31.621" x2="212.035" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="221.894" y1="31.621" x2="221.894" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="231.753" y1="31.621" x2="231.753" y2="39.508" bx:origin="0 2.0625"/>
                    <line style="paint-order: fill; stroke-miterlimit: 1; stroke-linecap: round; fill: none; stroke: ]]..neutralLineColor..[[;" x1="245" y1="25.706" x2="245" y2="39.508" bx:origin="0 1.535714"/>
                    <text style="fill: ]]..shieldHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="15" y="28.824" bx:origin="-2.698544 2.296589">Shield:</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 6.70451px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, -12.273296, 5.679566)" x="16" y="89.114" bx:origin="3.495402 -4.692753">Incoming Damage</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 73.924286, 48.558426)" x="16" y="89.114" dx="-83.506" dy="-39.079" bx:origin="35.484825 -7.519482">A</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 98.152718, 71.789642)" x="16" y="89.114" dx="-91.857" dy="-65.038" bx:origin="38.374239 -7.519481">E</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 106.659058, 48.558426)" x="16" y="89.114" dx="-83.506" dy="-39.079" bx:origin="33.936403 -7.519482">T</text>
                    <text style="fill: rgb(255, 240, 25); font-family: Arial; font-size: 5.58709px; line-height: 8.93935px; stroke-width: 0.25px; white-space: pre;" transform="matrix(1.017081, 0, 0, 0.89492, 121.659058, 48.558426)" x="16" y="89.114" dx="-83.506" dy="-39.079" bx:origin="27.291514 -7.519482">K</text>
                    <text style="fill: ]]..shieldHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="53.45" y="28.824" bx:origin="-2.698544 2.296589">]]..string.format('%.2f',shieldPercent)..[[%</text>
                    <text style="fill: ]]..ccsHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="153" y="28.824" bx:origin="-2.698544 2.296589">CCS:</text>
                    <text style="fill: ]]..ccsHPColor..[[; font-family: Arial; font-size: 11.8px; white-space: pre;" x="182.576" y="28.824" bx:origin="-2.698544 2.296589">]]..string.format('%.2f',CCSPercent)..[[%</text>
                    
                    ]]
                    if shield_1 then
                        local ventCD = shield_1.getVentingCooldown()
                        if ventCD > 0 then
                            hw = hw .. [[
                                <text style="fill: ]]..warning_outline_color..[[; font-family: Arial; font-size: 11.8px; paint-order: fill; white-space: pre;" x="66" y="91.01" bx:origin="-2.698544 2.296589">Vent Cooldown: </text>
                                <text style="fill: ]]..warning_outline_color..[[; font-family: Arial; font-size: 11.8px; paint-order: fill; white-space: pre;" x="151" y="91.01" bx:origin="-2.698544 2.296589">]]..string.format('%.2f',ventCD)..[[s</text>
                            ]]
                        end
                    end
            local placement = 0
            for i = 4, shieldPercent, 4 do 
                hw = hw .. [[<line style="stroke-width: 5px; stroke-miterlimit: 1; stroke: ]]..shieldHPColor..[[; fill: none;" x1="]]..tostring(5+placement)..[["   y1="42" x2="]]..tostring(5+placement)..[["   y2="55" bx:origin="0 0.096154"/>]]  placement = placement + 10
            end
        
            hw = hw .. '</svg>'
        
            return hw
        end
        
        function resistWidget()
            local rw = ''
        
            local stress = shield_1.getStressRatioRaw()
            local amS = stress[1]
            local emS = stress[2]
            local knS = stress[3]
            local thS = stress[4]
        
            local srp = shield_1.getResistancesPool()
            local csr = shield_1.getResistances()
            local amR = csr[1]/srp
            local emR = csr[2]/srp
            local knR = csr[3]/srp
            local thR = csr[4]/srp
        
            local resistTimer = shield_1.getResistancesCooldown()
            local resistTimerPer = 1 - resistTimer/shield_1.getResistancesMaxCooldown()
            local resistTimerColor = shieldHPColor
            if resistTimer > 0 then resistTimerColor = warning_outline_color end 
        
            if shield_1.isVenting() == 0 then
                warnings['venting'] = nil
            else 
                warnings['venting'] = 'svgCritical'
            end
        
            rw = [[
                <svg style="position: absolute; top: ]]..resistWidgetY..[[vh; left: ]]..resistWidgetX..[[vw;" viewBox="0 0 143 127" width="]]..resistWidgetScale..[[vw">
                    <defs>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-am">
                            <stop offset="]]..tostring(amS*100)..[[%" style="stop-color: ]]..antiMatterColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(amS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-th">
                            <stop offset="]]..tostring(thS*100)..[[%" style="stop-color: ]]..thermicColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(thS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-em">
                            <stop offset="]]..tostring(emS*100)..[[%" style="stop-color: ]]..electroMagneticColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(emS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="stress-kn">
                            <stop offset="]]..tostring(knS*100)..[[%" style="stop-color: ]]..kineticColor..[[; stop-opacity: 1"/>
                            <stop offset="]]..tostring(knS*100)..[[%" style="stop-color: ]]..neutralLineColor..[[; stop-opacity:.5"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-am">
                            <stop offset="]]..tostring(amR*100)..[[%" style="stop-color: ]]..antiMatterColor..[["/>
                            <stop offset="]]..tostring(amR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-em">
                            <stop offset="]]..tostring(emR*100)..[[%" style="stop-color: ]]..electroMagneticColor..[["/>
                            <stop offset="]]..tostring(emR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-th">
                            <stop offset="]]..tostring(thR*100)..[[%" style="stop-color: ]]..thermicColor..[["/>
                            <stop offset="]]..tostring(thR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="resist-kn">
                            <stop offset="]]..tostring(knR*100)..[[%" style="stop-color: ]]..kineticColor..[[;"/>
                            <stop offset="]]..tostring(knR*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                        </linearGradient>
                        <linearGradient x1="0%" y1="50%" x2="100%" y2="50%" id="resist-timer-horizontal" gradientUnits="userSpaceOnUse">
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..warning_outline_color..[[;"/>  
                        </linearGradient>
                        <linearGradient x1="50%" y1="0%" x2="50%" y2="80%" id="resist-timer-vertical" gradientUnits="userSpaceOnUse">
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..neutralLineColor..[[;"/>
                            <stop offset="]]..tostring(resistTimerPer*100)..[[%" style="stop-color: ]]..warning_outline_color..[[;"/>  
                        </linearGradient>
                    </defs>
                    <ellipse style="fill: none; stroke: ]]..neutralLineColor..[[;" cx="73" cy="61" rx="8" ry="8"/>
                    <ellipse style="fill: ]]..neutralLineColor..[[; stroke: ]]..neutralLineColor..[[;" cx="73" cy="61" rx="2" ry="2"/>
                    <polyline style="fill: none; stroke-linejoin: bevel; stroke-linecap: round; stroke: ]]..neutralLineColor..[[;" points="53 30 35 61 53 93"/>
                    <polyline style="fill: none; stroke-linejoin: bevel; stroke-linecap: round; stroke: ]]..neutralLineColor..[[;" points="92 30 110 61 92 93"/>
                    <polyline style="fill: none; stroke-linecap: round; stroke-linejoin: bevel; stroke: ]]..neutralLineColor..[[;" points="90 35 105 61 90 89"/>
                    <polyline style="fill: none; stroke-linecap: round; stroke-linejoin: bevel; stroke: ]]..neutralLineColor..[[;" points="55 35 40 61 55 89"/>
                    <line style="fill: none; stroke-width: 0.5px; stroke: url(#resist-timer-horizontal);" x1="17" y1="61" x2="128" y2="61"/>
                    <line style="fill: none; stroke-width: 0.5px; stroke: url(#resist-timer-vertical);" x1="72.888" y1="-9.275" x2="72.888" y2="101.725" transform="matrix(1, 0, 0, 1, 0.112056, 14.27536)"/>
                    <text style="fill: ]]..antiMatterColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="55.182" y="51.282">AM</text>
                    <text style="fill: ]]..electroMagneticColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="78" y="51.282">EM</text>
                    <text style="fill: ]]..thermicColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="78" y="77.282">TH</text>
                    <text style="fill: ]]..kineticColor..[[; font-size: 8px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="55" y="77.282">KN</text>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-am);" d="M 15 59 C 45.52 58.894 71.021 34.344 71 3" transform="matrix(-1, 0, 0, -1, 86.000015, 62)"/>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-th);" d="M 75 119 C 105.52 118.894 131.021 94.344 131 63"/>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-em);" d="M 75 59 C 105.52 58.894 131.021 34.344 131 3" transform="matrix(0, -1, 1, 0, 72.000008, 134.000008)"/>
                    <path style="fill: none; stroke-width: 3px; stroke-linecap: round; stroke: url(#stress-kn);" d="M 15 119 C 45.52 118.894 71.021 94.344 71 63" transform="matrix(0, 1, -1, 0, 134.000008, 47.999992)"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-am); stroke-width: 5px;" d="M 25 56 C 48.435 55.92 68.016 37.068 68 13" transform="matrix(-1, 0, 0, -1, 93.000015, 69)"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-em); stroke-width: 5px;" d="M 78 56 C 101.435 55.919 121.016 37.068 121 13" transform="matrix(0, -1, 1, 0, 65.000004, 134.000004)"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-th); stroke-width: 5px;" d="M 78 109 C 101.435 108.919 121.016 90.068 121 66"/>
                    <path style="fill: none; stroke-linecap: round; stroke: url(#resist-kn); stroke-width: 5px;" d="M 24 109 C 47.435 108.919 67.016 90.068 67 66" transform="matrix(0, 1, -1, 0, 133.000008, 41.999992)"/>
                    </svg>
            ]]
            return rw
        end
        
        function radarWidget()
            local rw = ''
            local friendlyShipNum = radarStats['friendly']['L'] + radarStats['friendly']['M'] + radarStats['friendly']['S'] + radarStats['friendly']['XS']
            local enemyShipNum = radarStats['enemy']['L'] + radarStats['enemy']['M'] + radarStats['enemy']['S'] + radarStats['enemy']['XS']
            local radarRangeString = formatNumber(radarRange,'distance')
        
            local x, y, s
            if minimalWidgets then 
                y = radarInfoWidgetYmin
                x = radarInfoWidgetXmin
                s = radarInfoWidgetScalemin
            else
                y = radarInfoWidgetY
                x = radarInfoWidgetX
                s = radarInfoWidgetScale
            end
        
            rw = rw .. string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.185 * screenHeight) ..'px;left: '.. tostring(.875 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">&nbsp;&nbsp;Identification Range:&nbsp;</div><div style="float: left;color: rgb(25, 247, 255);">%s&nbsp;</div></div>]],radarRangeString)
          
        
            rw = rw .. string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.15 * screenHeight) ..'px;left: '.. tostring(.90 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">Identified By:&nbsp;</div><div style="float: left;color: orange;">%.0f&nbsp;</div><div style="float: left;color: ]]..'white'..[[;">ships</div></div>]],identifiedBy)
        
            rw = rw .. string.format([[<div style="position: absolute;font-weight: bold;font-size: .8vw;top: ]].. tostring(.165 * screenHeight) ..'px;left: '.. tostring(.90 * screenWidth) ..[[px;">
            <div style="float: left;color: ]]..'white'..[[;">&nbsp;&nbsp;Attacked By:&nbsp;</div><div style="float: left;color: ]]..warning_outline_color..[[;">%.0f&nbsp;</div><div style="float: left;color: ]]..'white'..[[;">ships</div></div>]],attackedBy)
        
            rw = rw .. [[
                <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 0 286 240" width="]]..s..[[vw">
                    <rect x="6%" y="6%" width="87%" height="52%" rx="1%" ry="1%" fill="rgba(100,100,100,.9)" />
                    <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                    <polygon style="stroke-linejoin: round; fill: ]]..bgColor..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 135 18 138"/>
                    <text style="fill: ]]..fontColor..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">Radar Information (]]..tostring(radarContactNumber)..[[)</text>
                ]]
            rw = rw .. [[
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="54" x2="22" y2="77"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="73">Enemy Ships:</text>
                    <text style="fill: ]]..warning_outline_color..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="137" y="73">]]..enemyShipNum..[[</text>
        
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="81" x2="22" y2="104"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="30" y="100">L:</text>
                    <text style="fill: ]]..warning_outline_color..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="50" y="100">]]..radarStats['enemy']['L']..[[</text>
        
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="68" y="100">M:</text>
                    <text style="fill: ]]..warning_outline_color..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="95" y="100">]]..radarStats['enemy']['M']..[[</text>
        
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="115" y="100">S:</text>
                    <text style="fill: ]]..warning_outline_color..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="135" y="100">]]..radarStats['enemy']['S']..[[</text>
        
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="155" y="100">XS:</text>
                    <text style="fill: ]]..warning_outline_color..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="185" y="100">]]..radarStats['enemy']['XS']..[[</text>
        
                    <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="108" x2="22" y2="131"/>
                    <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="127">Friendly Ships:</text>
                    <text style="fill: ]]..ccsHPColor..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="150" y="127">]]..friendlyShipNum..[[</text>
        
                ]]
        
            rw = rw .. '</svg>'
        
            if attackedBy >= dangerWarning or showAlerts then
                warnings['attackedBy'] = 'svgWarning'
            else
                warnings['attackedBy'] = nil
            end
        
            if radarOverload or showAlerts then 
                warnings['radarOverload'] = 'svgCritical'
            else
                warnings['radarOverload'] = nil
            end
            return rw
        end
        
        function identifiedWidget()
            local identList = radar_1.getIdentifiedConstructIds()
            local targetID = radar_1.getTargetId()
            if not contains(identList,targetID) and targetID ~= 0 then table.insert(identList,targetID) end
            if targetID == 0 then warnings['cored'] = nil warnings['friendly'] = nil end
        
            local iw = ''
            local count = 1
        
            local targetSpeedSVG = ''
        
            for i,id in pairs(identList) do
                local size = radar_1.getConstructCoreSize(id)
                local dmg = 0
                if write_db and dmgTracker[tostring(id)] then write_db.setFloatValue('damage - ' .. tostring(id) .. ' - ' .. pilotName,dmgTracker[tostring(id)]) end
                if #db > 0 then
                    for _,dbName in pairs(db) do
                        for _,key in pairs(dbName.getKeyList()) do
                            if string.starts(key,'damage - ' .. tostring(id)) then
                                dmg = dmg + dbName.getFloatValue(key)
                            end
                        end
                    end
                end
                if (dmg == 0 or not write_db) and dmgTracker[tostring(id)] then dmg = dmgTracker[tostring(id)] end
                local dmgRatio = clamp(dmg/shieldDmgTrack[size],0,1)
                if dmg < 1000 then dmg = string.format('%.2f',dmg)
                elseif dmg < 1000000 then dmg = string.format('%.2fk',dmg/1000)
                else dmg = string.format('%.2fm',dmg/1000000)
                end
        
                local tMatch = radar_1.hasMatchingTransponder(id) == 1
                local shipIDMatch = false
                if useShipID then for k,v in pairs(friendlySIDs) do if id == k then shipIDMatch = true end end end
                local friendly = tMatch or shipIDMatch
        
                local abandonded = radar_1.isConstructAbandoned(id) == 1
                local cardFill = warning_outline_color
                local cardText = textColorPVP
                if friendly then cardFill = bottomHUDFillColorSZ cardText = textColorSZ
                elseif abandonded then cardFill = 'darkgrey' cardText = 'black'
                end
        
                local distance = radar_1.getConstructDistance(id)
                local distString = formatNumber(distance,'distance')
        
                local name = radar_1.getConstructName(id)
                local uniqueCode = string.sub(tostring(id),-3)
                local shortName = name:sub(0,17)
        
                local lineColor = 'lightgrey'
                local targetIdentified = radar_1.isConstructIdentified(id) == 1
        
                local x, y
                if not minimalWidgets and id ~= targetID then 
                    y = 11.25+2.5*(count-1)
                    x = 1
                    if count <= 5 and id ~= targetID then
                        iw = iw .. [[
                            <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 0 286 50" width="10vw">
                                <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..cardFill..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                                <text style="fill: ]]..cardText..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">]]..string.format('%s - [%s] %s (%s)',size,uniqueCode,shortName,distString)..[[</text>
                            </svg>
                        ]]
                        count = count + 1
                    end
                end
                if id == targetID then
                    if abandonded or showAlerts then warnings['cored'] = 'svgTarget' else warnings['cored'] = nil end
                    if friendly or showAlerts then warnings['friendly'] = 'svgGroup' else warnings['friendly'] = nil end
        
                    local speedVec = vec3(construct.getWorldVelocity())
                    local mySpeed = speedVec:len() * 3.6
                    local myMass = construct.getMass()
        
                    local targetSpeedString = 'Not Identified'
                    if targetIdentified then targetSpeed = radar_1.getConstructSpeed(id) * 3.6 targetSpeedString = formatNumber(targetSpeed,'speed') end
                    local speedDiff = 0
                    if targetIdentified then speedDiff = mySpeed-targetSpeed end
                    
                    local targetSpeedColor = neutralFontColor
                    if targetIdentified then
                        if speedDiff < -1000 then targetSpeedColor = warning_outline_color
                        elseif speedDiff > 1000 then targetSpeedColor = 'rgb(56, 255, 56)'
                        end
                    end
                    targetSpeedSVG = [[
                        <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="54" x2="22" y2="77"/>
                        <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="73">Speed:</text>
                        <text style="fill: ]]..targetSpeedColor..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="80" y="73">]]..targetSpeedString..[[</text>
                    ]]
        
                    local updateTimer = false
                    if system.getArkTime() - lastUpdateTime > 0.5 and lastUpdateTime ~= 0 then 
                        lastUpdateTime = system.getArkTime()
                        updateTimer = true
                    elseif lastUpdateTime == 0 then
                        lastUpdateTime = system.getArkTime()
                        lastDistance = distance
                    end
        
                    if updateTimer then
                        local localGapCompare = 'Stable'
                        local gap = distance - lastDistance
                        if gap < -250 then localGapCompare = 'Closing' 
                        elseif gap > 250 then localGapCompare = 'Parting'
                        end
                        gapCompare = localGapCompare
                        lastDistance = distance
                    end
                    local gapColor = neutralFontColor
                    if gapCompare == 'Closing' then gapColor = 'rgb(56, 255, 56)' elseif gapCompare == 'Parting' then gapColor = warning_outline_color end
                    local distanceCompareSVG = [[
                        <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="81" x2="22" y2="104"/>
                        <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="100">Gap:</text>
                        <text style="fill: ]]..gapColor..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="65" y="100">]]..tostring(gapCompare)..[[</text>
                    ]]
        
                    if updateTimer and targetIdentified then
                        local localSpeedCompare = 'No Change'
                        if lastSpeed then
                            local speedChange = targetSpeed - lastSpeed
                            if speedChange < -100 then localSpeedCompare = 'Braking'
                            elseif speedChange > 100 then localSpeedCompare = 'Accelerating'
                            end
                            speedCompare = localSpeedCompare
                        end
                        lastSpeed = targetSpeed
                    elseif not targetIdentified then
                        speedCompare = 'Not Identified'
                    end
                    local speedCompareColor = neutralFontColor
                    if speedCompare == 'Braking' then speedCompareColor = warning_outline_color elseif speedCompare == 'Accelerating' then speedCompareColor = 'rgb(56, 255, 56)' end
                    local speedCompareSVG = [[
                        <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="108" x2="22" y2="131"/>
                        <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="127">&#8796;Speed:</text>
                        <text style="fill: ]]..speedCompareColor..[[; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="95" y="127">]]..tostring(speedCompare)..[[</text>
                    ]]
        
                    local dmgSVG = [[
                        <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="135" x2="22" y2="158"/>
                        <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="154">Damage:</text>
                        <text style="fill: orange; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="95" y="154">]]..string.format('%s (%.2f%%)',dmg,(1-dmgRatio)*100)..[[</text>
                    ]]
        
                    local mass = radar_1.getConstructMass(id)
                    local topSpeed = (50000/3.6-10713*(mass-10000)/(853926+(mass-10000)))*3.6
                    if targetIdentified then
                        topSpeed = clamp(topSpeed,20000,50000)
                    else
                        topSpeed = 0
                    end
                    local topSpeedSVG = ''
                    if topSpeed > 0 then
                        topSpeedSVG = [[
                            <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="162" x2="22" y2="185"/>
                            <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="181">Top Speed:</text>
                            <text style="fill: orange; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="110" y="181">]]..formatNumber(topSpeed,'speed')..[[</text>
                        ]]
                    end
        
                    local info = radar_1.getConstructInfos(id)
                    local weapons = 'False'
                    if info['weapons'] ~= 0 then weapons = 'True' end
                    local dataSVG = ''
                    if targetIdentified then
                        dataSVG = [[
                            <line style="fill: none; stroke-linecap: round; stroke-width: 2px; stroke: ]]..neutralLineColor..[[;" x1="22" y1="189" x2="22" y2="212"/>
                            <text style="fill: ]]..neutralFontColor..[[; font-size: 20px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="27" y="208">Armed:</text>
                            <text style="fill: orange; font-size: 19px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="95" y="208">]]..weapons..[[</text>
                        ]]
                    end
        
                    local owner = ''
                    if radar_1.hasMatchingTransponder(id) == 1 then
                        owner = radar_1.getConstructOwnerEntity(id)
                        if owner['isOrganization'] then
                            owner = system.getOrganization(owner['id'])
                            owner = owner['tag']
                        else
                            owner = system.getPlayerName(owner['id'])
                        end
                    elseif friendlySIDs[id] then
                        owner = friendlySIDs[id]
                    end
                    if owner ~= '' then 
                        owner = [[<text style="fill: white; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="5">]]..string.format('Owned by: %s (%s)',owner,id)..[[</text>]]
                    end
        
                    y = 11.25
                    x = 10
                    s = 11.25
                    if minimalWidgets then x = 49.5 y = -0.9 s = 10 end
                    iw = iw .. [[
                        <svg style="position: absolute; top: ]]..y..[[vh; left: ]]..x..[[vw;" viewBox="0 -10 286 240" width="]]..s..[[vw">
                            ]]..owner..[[
                            <rect x="6%" y="6%" width="87%" height="90%" rx="1%" ry="1%" fill="rgba(100,100,100,.9)" />
                            <polygon style="stroke-width: 2px; stroke-linejoin: round; fill: ]]..cardFill..[[; stroke: ]]..lineColor..[[;" points="22 15 266 15 266 32 252 46 22 46"/>
                            <polygon style="stroke-linejoin: round; fill: ]]..cardFill..[[; stroke: ]]..lineColor..[[;" points="18 17 12 22 12 62 15 66 15 225 18 227"/>
                            <text style="fill: ]]..cardText..[[; font-size: 17px; paint-order: fill; stroke-width: 0.5px; white-space: pre;" x="37" y="35">]]..string.format('%s - [%s] %s (%s)',size,uniqueCode,shortName,distString)..[[</text>
                            ]]..targetSpeedSVG..[[
                            ]]..distanceCompareSVG..[[
                            ]]..speedCompareSVG..[[
                            ]]..dmgSVG
        
                    if targetIdentified then
                        iw = iw .. topSpeedSVG .. dataSVG
                    end
        
                    iw = iw.. [[
                        </svg>
                    ]]
        
                    if targetIndicators or showAlerts then
                        iw = iw .. [[
                            <svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">
                                <svg width="]].. tostring(.03 * screenWidth) ..[[" height="]].. tostring(.03 * screenHeight) ..[[" x="]].. tostring(.30 * screenWidth) ..[[" y="]].. tostring(.50 * screenHeight) ..[[" style="fill: ]]..speedCompareColor..[[;">
                                    ]]..warningSymbols['svgTarget']..[[
                                </svg>
                                <text x="]].. tostring(.327 * screenWidth) ..[[" y="]].. tostring(.51 * screenHeight) .. [[" style="fill: ]]..neutralFontColor..[[;" font-size="1.7vh" font-weight="bold">Speed Change:</text>
                                <text x="]].. tostring(.390 * screenWidth) ..[[" y="]].. tostring(.51 * screenHeight) .. [[" style="fill: ]]..speedCompareColor..[[;" font-size="1.7vh" font-weight="bold">]]..speedCompare..[[</text>
                                <text x="]].. tostring(.359 * screenWidth) ..[[" y="]].. tostring(.53 * screenHeight) .. [[" style="fill: ]]..neutralFontColor..[[;" font-size="1.7vh" font-weight="bold">Speed: </text>
                                <text x="]].. tostring(.390 * screenWidth) ..[[" y="]].. tostring(.53 * screenHeight) .. [[" style="fill: ]]..speedCompareColor..[[;" font-size="1.7vh" font-weight="bold">]]..targetSpeedString..[[</text>
                            </svg>
                        ]]
                    end
                end
            end
            
            return iw
        end
        
        function warningsWidget()
            local ww = '<svg width="100%" height="100%" style="position: absolute;left:0%;top:0%;font-family: Calibri;">'
            local warningText = {}
            warningText['attackedBy'] = string.format('%.0f ships attacking',attackedBy)
            warningText['radarOverload'] = 'Radar Overloaded'
            warningText['cored'] = 'Target is Destroyed'
            warningText['friendly'] = 'Target is Friendly'
            warningText['noRadar'] = 'No Radar Linked'
            warningText['venting'] = 'Shield Venting'
            warningText['radar_delta'] = string.format('Radar Delay %.2fs',cr_delta)
        
            local warningColor = {}
            warningColor['attackedBy'] = 'red'
            warningColor['radarOverload'] = 'orange'
            warningColor['cored'] = 'orange'
            warningColor['friendly'] = 'green'
            warningColor['noRadar'] = 'red'
            warningColor['venting'] = shieldHPColor
            warningColor['radar_delta'] = 'orange'
        
            local count = 0
            local y = .06
            if minimalWidgets then y = .14 end
            for k,v in pairs(warnings) do
                if v ~= nil then
                    ww = ww .. string.format([[
                        <svg width="]].. tostring(.03 * screenWidth) ..[[" height="]].. tostring(.03 * screenHeight) ..[[" x="]].. tostring(.65 * screenWidth) ..[[" y="]].. tostring(y * screenHeight + .032 * screenHeight * count) ..[[" style="fill: ]]..warningColor[k]..[[;">
                            ]]..warningSymbols[v]..[[
                        </svg>
                        <text x="]].. tostring(.677 * screenWidth) ..[[" y="]].. tostring((y+.02) * screenHeight + .032 * screenHeight * count) .. [[" style="fill: ]]..warningColor[k]..[[;" font-size="1.7vh" font-weight="bold">]]..warningText[k]..[[</text>
                        ]])
                    count = count + 1
                end
            end
            ww = ww .. '</svg>'
            return ww
        end
        
        function generateHTML()
            if write_db and write_db.hasKey('minimalWidgets') then
                minimalWidgets = write_db.getIntValue('minimalWidgets') == 1
            end 
            html = [[ <html> <body style="font-family: Calibri;"> ]]
            if showScreen then
            html = html .. hpWidget()
                if shield_1 then html = html .. resistWidget() end
                if weapon_1 then html = html .. weaponsWidget() end
                if transponder_1 then html = html .. transponderWidget() end
                if radar_1 then html = html .. radarWidget() end
                if radar_1 then html = html .. identifiedWidget() end
            end
            
            html = html .. warningsWidget()
            html = html .. [[ </body> </html> ]]
            system.setScreen(html)
        end

    onUpdate:
      lua: |
        arkTime = system.getArkTime()
        
        if bootTimer >= 2 then
            generateHTML()
        end
        
        inSZ = construct.isInPvPZone() == 0
        SZD = construct.getDistanceToSafeZone()
        bgColor = bottomHUDFillColorSZ 
        fontColor = textColorSZ
        lineColor = bottomHUDLineColorSZ
        if not inSZ then 
            lineColor = bottomHUDLineColorPVP
            bgColor = bottomHUDFillColorPVP
            fontColor = textColorPVP
        end
        
        -- Radar Updates --
        if radar_1 and cr == nil then
            cr = coroutine.create(updateRadar)
        elseif cr ~= nil then
            if coroutine.status(cr) ~= "dead" and coroutine.status(cr) == "suspended" then
                coroutine.resume(cr,radarFilter)
            elseif coroutine.status(cr) == "dead" then
                cr = nil
                system.updateData(radarDataID,radarWidgetData)
                if not cr_time then
                    cr_time = system.getArkTime()
                else
                    cr_delta = system.getArkTime() - cr_time
                    cr_time = system.getArkTime()
                    if (cr_delta > 1 and radarOverload) or showAlerts then
                        warnings['radar_delta'] = 'svgCritical'
                    else
                        warnings['radar_delta'] = nil
                    end
                end
            end
        end
        ---- End Radar Updates ----
        
        -- Shield Updates --
        local cPos = vec3(construct.getWorldPosition())
        if shield_1 then
            local srp = shield_1.getResistancesPool()
            local csr = shield_1.getResistances()
            local rcd = shield_1.getResistancesCooldown()
            if shield_1.getStressRatioRaw()[1] == 0 and shield_1.getStressRatioRaw()[2] == 0 and shield_1.getStressRatioRaw()[3] == 0 and shield_1.getStressRatioRaw()[4] == 0 then
                dmgTick = 0
                srp = srp / 4
                if (csr[1] == srp and csr[2] == srp and csr[3] == srp and csr[4] == srp) or rcd ~= 0 then
                    --No change
                else
                    shield_1.setResistances(srp,srp,srp,srp)
                end
            elseif math.abs(arkTime - dmgTick) >= initialResistWait then
                local srr = shield_1.getStressRatioRaw()
                if (csr[1] == (srp*srr[1]) and csr[2] == (srp*srr[2]) and csr[3] == (srp*srr[3]) and csr[4] == (srp*srr[4])) or rcd ~= 0 then -- If ratio hasn't change, or timer is not up, don't waste the resistance change timer.
                    --No change
                else
                    shield_1.setResistances(srp*srr[1],srp*srr[2],srp*srr[3],srp*srr[4])
                end
            elseif dmgTick == 0 then
                dmgTick = arkTime
            end
        
            local hp = shield_1.getShieldHitpoints()
            if shield_1.isVenting() == 0 and hp == 0 and autoVent then
                shield_1.startVenting()
            elseif shield_1.isActive() == 0 and shield_1.isVenting() == 0 or vec3(homeBaseVec - cPos):len() < homeBaseDistance*1000 then
                if homeBaseVec then
                    if vec3(homeBaseVec - cPos):len() >= homeBaseDistance*1000 then
                        shield_1.activate()
                    else
                        shield_1.deactivate()
                    end
                else
                    shield_1.activate()
                end
            end
        
            local coreHP = 0
            if core_1 then coreHP = (core_1.getMaxCoreStress()-core_1.getCoreStress())/core_1.getMaxCoreStress() end
        end
        -- End Shield Updates --
        
        -- AutoFollow Updates --
        local target = tostring(radar_1.getTargetId())
        if auto_follow then
            if not followID then followID = target end
            if followID then
                local identified = radar_1.isConstructIdentified(followID) == 1
                if identified then
                    local tSpeed = radar_1.getConstructSpeed(followID) * 3.6
                    local tDist = radar_1.getConstructDistance(followID)
                    write_db.setIntValue('targetID',tonumber(followID))
                    write_db.setFloatValue('targetSpeed',tSpeed)
                    write_db.setFloatValue('targetDistance',tDist)
                else
                    write_db.clearValue('targetID')
                    write_db.clearValue('targetSpeed')
                    write_db.clearValue('targetDistance')
                end
            end
        end
        -- End autofollow --
    onInputText(text):
      lua: |
        if string.starts(text:lower(),'code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            table.insert(tags,matches[2])
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Added--')
        end
        if string.starts(text:lower(),'hide codes') then
            showCode = false
            system.print('--Transponder Codes hidden--')
        end
        if string.starts(text:lower(),'show codes') then
            showCode = true
            system.print('--Transponder Codes visible--')
        end
        if string.starts(text:lower(),'delcode') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            local r = nil
            for i,v in ipairs(tags) do if v == matches[2] then r = i end end
            table.remove(tags,r)
            transponder_1.setTags(tags)
            transponder_1.deactivate()
            tags = transponder_1.getTags()
            system.print('--Transponder Code Removed--')
        end
        
        if string.starts(text:lower(),'printcore') then
            local targetID = radar_1.getTargetId()
            if targetID ~= 0 then
                system.print(targetID)
            end
        end
        if string.starts(text:lower(),'addships') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches > 1 then
                id = matches[2]
                if radar_1.hasMatchingTransponder(id) == 1 then
                    local owner = radar_1.getConstructOwnerEntity(id)
                    if owner['isOrganization'] then
                        owner = system.getOrganization(owner['id'])
                        owner = owner['tag']
                    else
                        owner = system.getPlayerName(owner['id'])
                    end
                    friendlySIDs[id] = owner
                    write_db.setStringValue(string.format('sc-%s',id),owner)
                    system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                else
                    friendlySIDs[id] = 'Auto Add'
                    write_db.setStringValue(string.format('sc-%s',id),'Auto Add')
                    system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                end
            else
                for _,id in ipairs(radar_1.getConstructIds()) do
                    if radar_1.hasMatchingTransponder(id) == 1 then
                        local owner = radar_1.getConstructOwnerEntity(id)
                        if owner['isOrganization'] then
                            owner = system.getOrganization(owner['id'])
                            owner = owner['tag']
                        else
                            owner = system.getPlayerName(owner['id'])
                        end
                        friendlySIDs[id] = owner
                        write_db.setStringValue(string.format('sc-%s',id),owner)
                        system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                    else
                        friendlySIDs[id] = 'Auto Add'
                        write_db.setStringValue(string.format('sc-%s',id),'Auto Add')
                        system.print(string.format('-- Added to friendly list (Name: %s | ID: %s)',radar_1.getConstructName(id),id))
                    end
                end
            end
        end
        if string.starts(text:lower(),'delshipid') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            local r = nil
            for k,v in pairs(friendlySIDs) do if k == matches[2] then r = k end end
            if r ~= nil then friendlySIDs[r] = nil end
            if write_db ~= nil and #matches == 2 then
                if write_db.hasKey('sc-' .. tostring(matches[2])) == 1 then write_db.setStringValue('sc-' .. tostring(matches[2]),nil) end
            end
            system.print('-- Construct removed from Friendly ID list --')
        end
        
        if type(tonumber(text)) == 'number' and (#text == 3 or text == '0') and codeSeed ~= nil then
            if text == '0' then
                    system.print('-- Removing primary target filter --')
                    primary = nil
                    radarFilter = 'All'
            else
                system.print(string.format('-- Adding primary target filter [%s] --',text))
                primary = tostring(text)
                radarFilter = 'primary'
            end
        end
        
        if string.starts(text,'agc') then
            local matches = {}
            for w in text:gmatch('([^ ]+) ?') do table.insert(matches,w) end
            if (#matches ~= 2 or not tonumber(matches[2])) and codeSeed ~= nil then
                system.print('-- Invalid start command --')
            else
                local t = nil
                if #matches == 2 then t = tonumber(matches[2]) elseif #matches == 1 then t = tonumber(matches[1]) end
                if codeSeed == nil then
                    system.print('-- Transponder started --')
                    codeSeed = t
                    unit.setTimer('code',0.25)
                else
                    codeSeed = t
                    system.print('-- Code seed changed --')
                end
            end
        end
        if string.starts(text:lower(),'show ') and not string.starts(text,'show code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if #matches ~= 2 then
                system.print('-- Invalid command format --')
            elseif not contains(validSizes,matches[2]) then
                system.print(string.format('-- Invalid filter "%s"',matches[2]))
            else
                if contains(filterSize,matches[2]) then
                    system.print(string.format('-- Already showing %s core size --',matches[2]))
                else
                    system.print(string.format('-- Including %s core size --',matches[2]))
                    table.insert(filterSize,matches[2])
                end
            end
        end
        if string.starts(text:lower(),'hide ') and not string.starts(text,'hide code') then
            local matches = {}
            for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
            if (#matches ~= 2 ) then
                system.print('-- Invalid command format --')
            else
                if not contains(filterSize,matches[2]) then
                    system.print(string.format('-- Already hiding %s core size --',matches[2]))
                else
                    local r = nil
                    for i,v in ipairs(filterSize) do 
                        if v == matches[2] then
                            r = i
                        end
                    end
                    if r ~= nil then
                        system.print(string.format('-- Hiding %s core size --',matches[2]))
                        table.remove(filterSize,r)
                    else
                        system.print(string.format('-- %s core size not found --',matches[2]))
                    end
                end
            end
        end
        if text:lower() == 'print db' then
            if write_db ~= nil then
                system.print('-- DB READOUT START --')
                for _,key in pairs(write_db.getKeyList()) do
                    if string.find(write_db.getStringValue(key),'::pos') ~= nil or true then
                        system.print(string.format('%s: %s',key,write_db.getStringValue(key)))
                    end
                end
                system.print('-- DB READOUT END --')
            else
                system.print('-- NO DB ATTACHED --')
            end
        end
        if text:lower() == 'clear db' then
            if write_db ~= nil then
                write_db.clear()
                system.print('-- DB CLEARED --')
            else
                system.print('-- NO DB ATTACHED --')
            end
        end
        if text:lower() == 'coreid' then
            system.print(string.format('-- %.0f --',construct.getId()))
        end
        if text:lower() == 'clear damage' then
            system.print('-- Clearing damage dealt to target (this seat only) --')
            local targetID = radar_1.getTargetId()
            if targetID == 0 then
                system.print('-- No target selected --')
            else
                if write_db then
                    if write_db.hasKey('damage - ' .. tostring(targetID) .. ' - ' .. pilotName) then
                        write_db.clearValue('damage - ' .. tostring(targetID) .. ' - ' .. pilotName)
                        system.print('Cleared: ' .. 'damage - ' .. tostring(targetID) .. ' - ' .. pilotName)
                    end
                end
                dmgTracker[tostring(targetID)] = nil
                system.print('Cleared dmgTracker: ' .. tostring(targetID))
            end
        end
        if text:lower() == 'clear all damage' then
            system.print('-- Clearing all damage dealt (this seat only) --')
            dmgTracker = {}
            for _,dbName in pairs(db) do
                for _,key in pairs(dbName.getKeyList()) do
                    if string.starts(key,'damage - ') then
                        dbName.clearValue(key)
                    end
                end
            end
        end
        if text:lower() == 'print damage' then
            system.print('-- Printing all damage dealt --')
            for _,dbName in pairs(db) do
                for _,key in pairs(dbName.getKeyList()) do
                    if string.starts(key,'damage - ') then
                        system.print(string.format('%s: %.2f',key,dbName.getFloatValue(key)))
                    end
                end
            end
        end
        if string.starts(text,'/G') then
            if write_db ~= nil then
                local matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                local found = false
                if #matches > 2 then
                    for _,key in pairs(write_db.getKeyList()) do
                        if matches[2] == key then
                            found = true
                            write_db.setStringValue(key,matches[3])
                            write_db.setIntValue(key,tonumber(matches[3]))
                        end
                    end
                    if found then
                        system.print(string.format('Set "%s" to "%s"',matches[2],matches[3]))
                    else
                        system.print('-- INVALID VARIABLE NAME --')
                    end
                else
                    system.print('-- INVALID COMMAND FORMAT --')
                end
            else
                system.print('-- NO DATABANK --')
            end
        end
        if string.starts(text,'?') then
            if write_db ~= nil then
                local matches = {}
                for w in text:gmatch("([^ ]+) ?") do table.insert(matches,w) end
                if #matches > 1 then
                    system.print('-- DB READOUT START --')
                    for _,key in pairs(write_db.getKeyList()) do
                        if string.find(key,matches[2]) ~= nil then
                            system.print(string.format('%s = %s',key,write_db.getStringValue(key)))
                        end
                    end
                    system.print('-- DB READOUT END --')
                end
            else
                system.print('-- NO DB ATTACHED --')
            end
        end
    onActionStart:
      args: ['option5']
      lua: |
          auto_follow = not auto_follow
          if auto_follow and tostring(radar_1.getTargetId()) == "0" then auto_follow = false end
          system.print(string.format('-- Gunner Chair Auto Follow "%s"',auto_follow))
    onActionStart:
      args: ['option7']
      lua: |
          if lShift then
              if radarSort == 'Distance' then 
                  radarSort = 'Size' 
              else 
                  radarSort = 'Distance' 
              end
              system.print('-- Radar Sort: '..radarSort)
          else
              if radarFilter == 'All' then radarFilter = 'enemy' system.print('-- Radar: enemy --')
              elseif radarFilter == 'enemy' then radarFilter = 'identified' system.print('-- Radar: identified --')
              elseif radarFilter == 'identified' then radarFilter = 'friendly' system.print('-- Radar: friendly --')
              elseif radarFilter == 'friendly' then radarFilter = 'primary' system.print('-- Radar: primary --')
              elseif radarFilter == 'primary' then radarFilter = 'All' system.print('-- Radar: All --')
              end
          end

    onActionStart:
      args: ['option8']
      lua: |
          if shield_1 and shield_1.isVenting() == 0 then shield_1.startVenting()
          elseif shield_1 and shield_1.isVenting() == 1 then shield_1.stopVenting() shield_1.activate()
          end
    onActionStart:
      args: ['lshift']
      lua: |
          showScreen = false
          lShift = true
    onActionStop:
      args: ['lshift']
      lua: |
          showScreen = true
          lShift = false
  weapon_1:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
  weapon_1:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_1:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_2:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
  weapon_2:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_2:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_3:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
  weapon_3:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_3:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_4:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
  weapon_4:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_4:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_5:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
  weapon_5:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_5:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
  weapon_6:
    onHit(targetId,damage):
      lua: |
        if printCombatLog then 
            system.print(string.format('Hit %s for %.0f damage',radar_1.getConstructName(targetId),damage))
        end
        
        if dmgTracker[tostring(targetId)] then 
            dmgTracker[tostring(targetId)] = dmgTracker[tostring(targetId)] + damage
        else
            dmgTracker[tostring(targetId)] = damage
        end
  weapon_6:
    onMissed(targetId):
      lua: |
        if printCombatLog then 
            system.print(string.format('Missed %s',radar_1.getConstructName(targetId)))
        end
  weapon_6:
    onElementDestroyed(targetId,elementId):
      lua: |
        if printCombatLog then 
            local element = system.getItem(elementId)
            local name = element['displayName']
            system.print(string.format('Destroyed %s on %s',name,radar_1.getConstructName(targetId)))
        end
